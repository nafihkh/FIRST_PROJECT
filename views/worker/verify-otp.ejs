<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <title>
        <%= title %> | MyApp
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />

    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="/css/login.css" />
    <style>
        #particles-js {
            position: fixed;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.8rem;
            font-weight: 700;
            color: #f1f5f9;
            display: block;
            width: 150px;
        }

        .logo-img {
            display: block;
            width: 100%;
        }
    </style>
</head>

<body>
    <%- include('../partials/tosta') %>
    <div id="particles-js"></div>
    <div class="logo">
        <img src="/images/logo.png" alt="" class="logo-img">
    </div>
    <p class="text-center login-p">
        We’ll send a verification code to your email address
        <%= email ? email : "your registered email" %>
    </p>
    <div class="mx-auto login-box">
        <h2 class="login-text mb-3">Reset Password</h2>
        <p class="text-center login-p">
            A password reset OTP will be sent to your email address.
        </p>
       
            <form id="verify-otp" class="text-start mb-3">
                <label for="otp-box-1" class="label mb-3">Enter 6‑digit OTP</label>
                <div class="otp mb-3" data-otp-length="6" aria-label="One-time code">
                    <input id="otp-box-1" class="otp-box" type="text" inputmode="numeric" autocomplete="one-time-code"
                        pattern="\d*" maxlength="1" aria-label="Digit 1" />
                    <input id="otp-box-2" class="otp-box" type="text" inputmode="numeric" pattern="\d*" maxlength="1"
                        aria-label="Digit 2" />
                    <input id="otp-box-3" class="otp-box" type="text" inputmode="numeric" pattern="\d*" maxlength="1"
                        aria-label="Digit 3" />
                    <input id="otp-box-4" class="otp-box" type="text" inputmode="numeric" pattern="\d*" maxlength="1"
                        aria-label="Digit 4" />
                    <input id="otp-box-5" class="otp-box" type="text" inputmode="numeric" pattern="\d*" maxlength="1"
                        aria-label="Digit 5" />
                    <input id="otp-box-6" class="otp-box" type="text" inputmode="numeric" pattern="\d*" maxlength="1"
                        aria-label="Digit 6" />
                </div>
                
                <input type="hidden" name="otp" id="otp" />
                <!-- <button type="submit">Verify</button> -->
                   <label id="resend-label" class="text-center d-block" style="color: #bcc1ca; font-size: 12px">
                Resend OTP in <span id="countdown">10:00</span>
            </label>
            <div class="text-center"><button type="submit" class="btn btn-primary login-btn">Submit</button></div>
            
            </form>

          
       

        <p class="label">
            Remember your password? <a href="/worker/login">Login</a>
        </p>
        <p id="error-msg" class="text-danger"></p>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>

    <script>
        particlesJS("particles-js", {
            particles: {
                number: { value: 80, density: { enable: true, value_area: 800 } },
                color: { value: "#3b82f6" },
                shape: { type: "circle" },
                opacity: { value: 0.5, random: true },
                size: { value: 3, random: true },
                line_linked: {
                    enable: true,
                    distance: 150,
                    color: "#3b82f6",
                    opacity: 0.2,
                    width: 1
                },
                move: {
                    enable: true,
                    speed: 2,
                    direction: "none",
                    random: true,
                    straight: false,
                    out_mode: "out",
                    bounce: false
                }
            },
            interactivity: {
                detect_on: "canvas",
                events: {
                    onhover: { enable: true, mode: "repulse" },
                    onclick: { enable: true, mode: "push" },
                    resize: true
                }
            }
        });
        
        let timeLeft = 600;
        const countdownEl = document.getElementById("countdown");
        const resendLabel = document.getElementById("resend-label");

        const timer = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            countdownEl.textContent = `${minutes}:${seconds < 10 ? "0" : ""}${seconds}`;

            if (timeLeft <= 0) {
                clearInterval(timer);
                resendLabel.innerHTML = `<a href="/verify-otp?email=<%= email %>">Resend OTP</a>`;
            }
            timeLeft--;
        }, 1000);

        document.getElementById("verify-otp").addEventListener("submit", async (e) => {
            e.preventDefault();

            const email = "<%= email %>";
            const otp = document.getElementById("otp").value;

            try {
                const res = await fetch("/auth/worker/verify-otp", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email, otp }),
                });

                const data = await res.json();
                if (res.ok) {
                    showToast('success', 'Verifiverification Successful', `${data.message}`)
                    setTimeout(() => {
                        window.location.href = "/worker/reset-password?email=" + email;
                    }, 1500);
                } else {
                    showToast('error', 'Invalid OTP', `${data.error}`)
                }
            } catch (err) {
                showToast('error', 'Server error', `Something went wrong!`)
            }
        });
        (function () {
            const form = document.getElementById('verify-otp');
            const boxes = Array.from(form.querySelectorAll('.otp-box'));
            const hidden = form.querySelector('#otp');
            const len = boxes.length;

            function setHidden() {
                hidden.value = boxes.map(b => b.value).join('');
            }

            function focusBox(i) {
                if (i >= 0 && i < len) boxes[i].focus();
            }

            boxes.forEach((box, i) => {
                box.addEventListener('input', (e) => {
                    // Keep only one digit
                    const v = e.target.value.replace(/\D/g, '').slice(0, 1);
                    e.target.value = v;
                    if (v && i < len - 1) focusBox(i + 1);
                    setHidden();
                });

                box.addEventListener('keydown', (e) => {
                    const { key } = e;
                    if (key === 'Backspace' && !box.value && i > 0) {
                        focusBox(i - 1);
                    } else if (key === 'ArrowLeft') {
                        e.preventDefault(); focusBox(i - 1);
                    } else if (key === 'ArrowRight') {
                        e.preventDefault(); focusBox(i + 1);
                    }
                });

                box.addEventListener('focus', () => {
                    // Select existing digit for quick overwrite
                    box.select();
                });

                box.addEventListener('paste', (e) => {
                    e.preventDefault();
                    const text = (e.clipboardData || window.clipboardData).getData('text').replace(/\D/g, '').slice(0, len);
                    if (!text) return;
                    // Fill forward from the first box
                    boxes.forEach((b, idx) => { b.value = text[idx] || ''; });
                    setHidden();
                    // Focus last filled box
                    const lastIdx = Math.min(text.length, len) - 1;
                    focusBox(lastIdx >= 0 ? lastIdx : 0);
                });
            });

            form.addEventListener('submit', (e) => {
                setHidden();
                if (hidden.value.length !== len) {
                    e.preventDefault();
                    alert('Please enter the 6‑digit code.');
                    focusBox(hidden.value.length);
                }
            });
        })();
    </script>
</body>

</html>