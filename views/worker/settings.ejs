<!DOCTYPE html>
<html lang="en">

<head>
    <title>Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        @font-face {
            font-family: "Inter";
            src: url("/fonts/Inter-Regular.ttf");
        }

        body {
            font-family: "Inter";
            background-color: #0f172a;
            color: white;
        }

        .card {
            background: #1e293b;
            border: none;
            border-radius: 15px;
        }

        .nav-link.active {
            background: #6366f1 !important;
        }

        .profile-card {
            background: linear-gradient(-70deg, #222426FF 0%, #2A2C2FFF 100%);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #4f46e5;
        }

        .star-rating {
            color: gold;
        }

        .skills-badge {
            background: #565e6c;
            border: 1px solid #636AE8;
            color: #fff;
            margin: 5px;
            padding: 8px 14px;
            border-radius: 20px;
            font-size: 0.85rem;
            display: inline-block;
        }

        .btn-skill {
            background: #4f46e5;
            border: none;
            color: #fff;
            padding: 6px 14px;
            border-radius: 20px;
            font-size: 0.85rem;
            margin-top: 8px;
        }

        .stats-card,
        .review-card {
            background: linear-gradient(-70deg, #222426FF 0%, #2A2C2FFF 100%);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .review-star {
            color: gold;
            font-size: 1rem;
        }

        .hidden-input {
            display: none;
            border: none;
            background: transparent;
            color: #fff;
            font-size: 14px;
            margin: 0 !important;
            padding: 0 !important;
        }

        .hidden-input:focus {
            border: 0px;
            background: transparent;
            color: #fff;
            outline: none;
            box-shadow: none;
        }

        .info-label {
            font-size: 14px;
            color: #bcc1ca;
            font-family: 'Inter';
        }

        .info-text {
            font-size: 14px;
        }

        .change-profile {
            top: 0px;
            left: 0px;
            display: none;
        }

        .position-relative:hover .change-profile {
            display: block !important;
        }

        .text-per {
            color: #9095a0;
            font-size: 14px;
        }

        .verification-card {
            background: linear-gradient(-70deg, #222426FF 0%, #2A2C2FFF 100%);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .step-indicator {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            color: white;
            font-weight: 600;
        }

        .verification-row {
            background: rgba(255, 255, 255, 0.02);
            border: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.3s ease;
        }

        .icon-box {
            width: 40px;
            height: 40px;
            background-color: rgb(55 65 81);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 16px;
            margin-right: 15px;
        }

        .verify-button {
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
            border: none;
        }
        .verify-button-success {
            background: linear-gradient(135deg, #4ade80, #22c55e, #15803d);

            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(116, 241, 99, 0.3);
            border: none;
        }

        .verify-button:hover {
            background-color: #4338ca;
        }

        .otp-input {
            width: 100%;
            padding: 12px;
            border-radius: 8px;
            font-size: 16px;
            color: #fff;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.2);
            outline: none;
            transition: all 0.3s ease;
        }

        .otp-input::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }

        .otp-input:focus {
            border-color: #4f46e5;
            /* Accent color */
            box-shadow: 0 0 0 0.25rem rgba(79, 70, 229, 0.25);
        }

        .card {
            background: linear-gradient(-70deg, #222426FF 0%, #2A2C2FFF 100%);
            border: none;
            border-radius: 15px;
        }

        .nav-link.active {
            background: #6366f1 !important;
        }

        .inbox {
            width: 100%;
            height: 36px;
            padding-left: 12px;
            padding-right: 12px;
            font-family: Inter;
            font-size: 14px;
            line-height: 22px;
            font-weight: 400;
            background: #323743FF;
            border-radius: 9999px;
            border-width: 1px;
            border-color: #323743FF;
            border-style: solid;
            outline: none;
            color: #bcc1ca;
        }

        .label-set {
            color: #9095a0;
            font-size: 14px;
        }
        #jobtittle::placeholder {
             color: #9095a0;
            font-size: 14px;
        }
         #jobtittle:focus {
             color: #9095a0;
            font-size: 14px;
            background: transparent;
        }
        #location::placeholder {
            color: #9095a0;
            font-size: 14px;

        }
        #location:focus {
             color: #9095a0;
            font-size: 14px;
            background: transparent;
        }
    </style>

</head>

<body>

    <%- include('../partials/header') %>

        <div class="d-flex">

            <%- include('../partials/sidebar') %>
            <%- include('../partials/tosta') %>

                <div class="flex-grow-1 p-4">
                    <div class="container py-2">
                        <h3 class="fw-bold mb-4">Settings</h3>
                        <div class="row g-4">
                            <!-- Profile Card -->
                            <div class="col-md-4">
                                <div class="profile-card">
                                    <div class="text-center">
                                        <form id="profileForm" action="/worker/settings/profile" method="POST"
                                            enctype="multipart/form-data">
                                            <label for="profilePhotoInput" style="cursor: pointer;"
                                                class="position-relative">
                                                <img src="<%= user.profile_photo || 'https://res.cloudinary.com/dqugwh4su/image/upload/v1761538454/profileeg_tnbpak.jpg' %>"
                                                    alt="Profile" class="profile-img mb-3" id="profilePreview">
                                                <div class="change-profile position-absolute p-4 rounded-circle"
                                                    style="background-color: #00000059; height: 120px; width: 120px;">
                                                    <br>Change
                                                </div>
                                            </label>
                                            <br>
                                            <h5 style="font-size: 20px;" class="info-text text-white"><%= user.username %></h5>
                                            <input type="text" style="font-size: 20px;" name="username"
                                                value="<%= user.username %>"
                                                class="form-control text-center hidden-input"
                                                value="<%= user.username %>">

                                            <p class="mb-2 text-center">
                                                <span style="color: #bcc1ca; font-size: 16px;"
                                                    class="info-text text-center"><%= user.jobtittle %></span>
                                                <input style="color: #bcc1ca; font-size: 16px;" type="text"
                                                    class="form-control text-center hidden-input" id="jobtittle" placeholder="Enter your jobtitle" name="jobtittle"
                                                    value="<%= user.jobtittle %>">
                                            </p>
                                            <p class="star-rating"> <% 
                const rating = parseFloat(stats.avgRating);
                const fullStars = Math.floor(rating);
                const hasHalfStar = (rating % 1) >= 0.5;
                const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
            %>
            <%= '★'.repeat(fullStars) %><% if (hasHalfStar) { %>☆<% } %><%= '☆'.repeat(emptyStars) %></p>
                                            <input type="file" id="profilePhotoInput" name="profile_photo"
                                                accept="image/*" class="d-none">
                                            <hr class="border-secondary">
                                    </div>

                                    <!-- Profile Info -->
                                    <div id="profileInfo">
                                        <p class="mb-2">
                                            <span class="info-label">Email</span><br>
                                            <span class="info-text"><%= user.email %></span>
                                            <input type="email" name="email" class="form-control hidden-input"
                                                value="<%= user.email %>">
                                        </p>

                                        <p class="mb-2">
                                            <span class="info-label">Phone</span><br>
                                            <span class="info-text"><%= user.phone %></span>
                                            <input type="text" name="phone" class="form-control hidden-input"
                                                value="<%= user.phone %>">
                                        </p>

                                        <p class="mb-2">
                                            <span class="info-label">Location</span><br>
                                            <span class="info-text"><%= user.location %></span>
                                            <input type="text" name="location" id="location" placeholder="Click to add Location" class="form-control hidden-input"
                                                value="<%= user.location %>">
                                        </p>

                                        <p class="mb-2">
                                            <span class="info-label">Member Since</span><br>
                                            <span style="font-size: 14px;">January 2025</span>
                                        </p>
                                    </div>

                                    <!-- Button Row (Initially hidden) -->
                                    <div id="actionBtns" class="text-end d-none mt-3">
                                        <button id="saveBtn" type="submit" class="btn btn-primary btn-sm">Save
                                            Changes</button>
                                        <button id="cancelBtn" type="button"
                                            class="btn btn-secondary btn-sm">Cancel</button>
                                    </div>

                                    <!-- Edit Trigger -->
                                    <div class="text-end mt-2">
                                        <button id="editBtn" class="btn btn-outline-light btn-sm mb-3" type="button">
                                            <i class="bi bi-pencil-square me-1"></i>Edit Profile
                                        </button>
                                    </div>
                                    </form>
                                </div>
                            </div>

                            <!-- Skills & Stats -->
                            <div class="col-md-8">
                                <!-- Skills -->
                                <div class="profile-card">
                                    <h5 class="fw-bold mb-3">Skills & Expertise</h5>
                                    <div id="skillsContainer">
                                        <% if(worker.skills && worker.skills.length> 0) { %>
                                            <% worker.skills.forEach(skill=> { %>
                                                <span class="skills-badge">
                                                    <%= skill %>
                                                        <i class="bi bi-x-circle-fill ms-1 remove-skill"
                                                            data-skill="<%= skill %>"></i>
                                                </span>
                                                <% }) %>
                                                    <% } else { %>
                                                        <p class="text-muted">No skills added yet.</p>
                                                        <% } %>
                                    </div>
                                    <button class="btn btn-skill mt-3 fw-semibold" data-bs-toggle="modal"
                                        data-bs-target="#addSkillModal">
                                        + Add Skill
                                    </button>
                                </div>

                                <!-- Stats -->
                                <div class="stats-card">
                                    <h5 class="mb-3 fw-bold">Performance Stats</h5>
                                    <div class="row text-center align-items-center">
                                        <div class="col-md-3">
                                            <h5 class="fw-semibold" style="font-size: 20px;"><%= stats.totalReviews %></h5>
                                            <p class="text-per small">Total Reviews</p>
                                        </div>
                                        <div class="col-md-3">
                                            <h5 class="fw-semibold" style="color: #4ade80; font-size: 20px;"> <%= stats.successRate %>%</h5>
                                            <p class="text-per small">Success Rate</p>
                                        </div>
                                        <div class="col-md-3">
                                            <h5 class="fw-semibold" style="font-size: 20px;"><%= stats.avgRating %></h5>
                                            <p class="text-per small">Avg Rating</p>
                                        </div>
                                        <div class="col-md-3">
                                            <h5 class="fw-semibold" style="font-size: 20px;"><%= stats.completedTasks %></h5>
                                            <p class="text-per small">Completed Tasks</p>
                                        </div>
                                    </div>
                                </div>

                                <!-- Reviews -->
                                <div class="review-card">
                                    <h5 class="fw-bold mb-3">Recent Reviews</h5>
                                    <div class="d-flex align-items-start">
                                        <div>
                                            <strong>Alexw</strong><br>
                                            <p class="small text-white mb-1">
                                                "Excellent work on the e-commerce website. Professional, timely, and
                                                exceeded expectations!"
                                            </p>
                                            <span class="review-star">★★★☆☆</span> <span>2.5</span>
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="col-md-6">
                                <div class="verification-card">
                                    <h5 class="fw-bold mb-3">Two-Step Verification</h5>
                                    <p style="color: #bcc1ca; font-size: 14px;">Secure your account with additional
                                        verification steps</p>

                                    <!-- EMAIL VERIFICATION -->
                                    <h6 class="d-flex align-items-center fw-semibold">
                                        <div style="width: 1.5rem; height: 1.5rem;"
                                            class="step-indicator rounded-circle d-flex align-items-center justify-content-center me-2">
                                            1
                                        </div>Email Verification
                                    </h6>

                                    <div
                                        class="verification-row d-flex align-items-center justify-content-between p-4 rounded-3">
                                        <div class="d-flex align-items-center flex-grow-1">
                                            <div class="icon-box"><i class="bi bi-envelope text-white"></i></div>
                                            <div class="flex-grow-1">
                                                <p class="mb-0 fw-medium">
                                                    <%= user.email %>
                                                </p>
                                                <small style="color: rgb(156, 163, 175);">Primary email address</small>
                                            </div>
                                        </div>
                                        <% if (user.mail_verified) { %>
                                            <button id="emailVerifyBtn"  class="verify-button-success px-4 py-2 text-white fw-semibold rounded-3" disabled>
                                            Verified 
                                            </button>
                                        <% } else { %>
                                           <button id="emailVerifyBtn"
                                            class="verify-button px-4 py-2 text-white fw-semibold rounded-3">
                                            Verify
                                        </button>
                                        <% } %>
                                    </div>

                                    <!-- Email OTP Input -->
                                    <div class="verify-section d-none" id="EmailVerifyBox">
                                        <input type="text" id="emailOtp" class="otp-input mt-3"
                                            placeholder="Enter 6-digit OTP sent to your email" maxlength="6">
                                        <div class="d-flex justify-content-between align-items-center mt-2">
                                            <p style="color: rgb(156, 163, 175); font-size: 14px;"
                                                class="otp-info mb-0">
                                                Code expires in <span id="emailTimer"
                                                    style="color: rgb(99 102 241);">02:00</span>
                                            </p>
                                            <button id="resendEmailBtn" class="bg-transparent border-0"
                                                style="color: rgb(99 102 241); font-size: 14px;">Resend Code</button>
                                        </div>
                                    </div>

                                    <!-- PHONE VERIFICATION -->
                                    <h6 class="d-flex align-items-center fw-semibold mt-3">
                                        <div style="width: 1.5rem; height: 1.5rem;"
                                            class="step-indicator rounded-circle d-flex align-items-center justify-content-center me-2">
                                            2
                                        </div>Phone Verification
                                    </h6>

                                    <div
                                        class="verification-row d-flex align-items-center justify-content-between p-4 rounded-3">
                                        <div class="d-flex align-items-center flex-grow-1">
                                            <div class="icon-box"><i class="bi bi-telephone text-white"></i></div>
                                            <div class="flex-grow-1">
                                                <p class="mb-0 fw-medium">
                                                    <%= user.phone %>
                                                </p>
                                                <small style="color: rgb(156, 163, 175);">Registered mobile
                                                    number</small>
                                            </div>
                                        </div>
                                        <% if (user.phone_verified) { %>
                                             <button id="phoneSendBtn"
                                            class="verify-button-success px-4 py-2 text-white fw-semibold rounded-3" disabled>
                                            Verified
                                        </button>
                                        <% } else { %>
                                           <button id="phoneSendBtn"
                                            class="verify-button px-4 py-2 text-white fw-semibold rounded-3">
                                            Verify
                                        </button>
                                        <% } %>
                                    </div>

                                    <!-- Phone OTP Input -->
                                    <div class="verify-section d-none" id="phoneVerifyBox">
                                        <input type="text" id="phoneOtp" class="otp-input mt-3"
                                            placeholder="Enter 6-digit SMS Code" maxlength="6">
                                        <div class="d-flex justify-content-between align-items-center mt-2">
                                            <p style="color: rgb(156, 163, 175); font-size: 14px;"
                                                class="otp-info mb-0">
                                                Code expires in <span id="phoneTimer"
                                                    style="color: rgb(99 102 241);">02:00</span>
                                            </p>
                                            <button id="resendPhoneBtn" class="bg-transparent border-0"
                                                style="color: rgb(99 102 241); font-size: 14px;">Resend Code</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card p-3">
                                    <h5 class="text-white fw-bold mb-2">Security Settings</h5>
                                    <form id="passwordForm" action="/worker/settings/password" method="POST"
                                        enctype="multipart/form-data">
                                        <label class="label-set fw-semibold mb-1" for="currentPassword">Current
                                            Password</label>
                                        <input type="password" name="currentPassword" class="inbox fw-semibold mb-3"
                                            placeholder="Current Password">

                                        <label class="label-set fw-semibold mb-1" for="newPassword">New Password</label>
                                        <input type="password" name="newPassword" class="inbox fw-semibold mb-3"
                                            placeholder="New Password">

                                        <label class="label-set fw-semibold mb-1" for="confirmPassword">Confirm
                                            Password</label>
                                        <input type="password" name="confirmPassword" class="inbox fw-semibold mb-3"
                                            placeholder="Confirm Password">

                                        <button type="submit" class="btn btn-primary"
                                            style="font-size: 14px; height: 35px; width: 150px; margin-bottom: 58px;">Update
                                            Password</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Add Skill Modal -->
                    <div class="modal fade" id="addSkillModal" tabindex="-1" aria-labelledby="addSkillModalLabel"
                        aria-hidden="true">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content bg-dark text-white">
                                <div class="modal-header border-0">
                                    <h5 class="modal-title" id="addSkillModalLabel">Add a New Skill</h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <input type="text" id="newSkillInput"
                                        class="form-control bg-secondary text-white border-0" placeholder="Enter skill">
                                </div>
                                <div class="modal-footer border-0">
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-primary" id="addSkillBtn">Add Skill</button>
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
                <script>

                    const editBtn = document.getElementById("editBtn");
                    const saveBtn = document.getElementById("saveBtn");
                    const cancelBtn = document.getElementById("cancelBtn");
                    const actionBtns = document.getElementById("actionBtns");
                    const infoTexts = document.querySelectorAll(".info-text");
                    const inputs = document.querySelectorAll(".hidden-input");

                    editBtn.addEventListener("click", () => {
                        infoTexts.forEach(text => text.style.display = "none");
                        inputs.forEach(input => input.style.display = "block");

                        actionBtns.classList.remove("d-none"); // show bottom buttons
                        editBtn.classList.add("d-none"); // hide edit button
                    });

                    // Save changes
                    saveBtn.addEventListener("click", () => {
                        infoTexts.forEach((text, index) => {
                            text.innerText = inputs[index].value;
                            text.style.display = "inline";
                            inputs[index].style.display = "none";
                        });

                        actionBtns.classList.add("d-none");
                        editBtn.classList.remove("d-none");
                    });

                    const profilePhotoInput = document.getElementById("profilePhotoInput");
                    const profilePreview = document.getElementById("profilePreview");

                    profilePhotoInput.addEventListener("change", function () {
                        if (this.files && this.files[0]) {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                profilePreview.src = e.target.result; // show preview
                            };
                            reader.readAsDataURL(this.files[0]);
                        }
                    });

                    // Cancel changes
                    cancelBtn.addEventListener("click", () => {
                        infoTexts.forEach((text, index) => {
                            inputs[index].value = text.innerText;
                            text.style.display = "inline";
                            inputs[index].style.display = "none";
                        });

                        actionBtns.classList.add("d-none");
                        editBtn.classList.remove("d-none");
                    });
                    document.getElementById("passwordForm").addEventListener("submit", async function (e) {
                        e.preventDefault();

                        const formData = {
                            currentPassword: this.currentPassword.value,
                            newPassword: this.newPassword.value,
                            confirmPassword: this.confirmPassword.value
                        };

                        try {
                            const response = await fetch("/worker/settings/password", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify(formData)
                            });

                            const data = await response.json();

                            showToast(data.success ? 'success' : 'warning', data.success ? 'Pssword Updated successfully!' : 'Failed Password Update!', data.success ? `${data.message}` : `${data.error}`);
                            if (data.success) {
                                setTimeout(() => location.reload(), 1000);
                            }
                        } catch (err) {
                            console.error(err);
                        }
                    });

                    const profileForm = document.getElementById("profileForm");

                    profileForm.addEventListener("submit", async function (e) {
                        e.preventDefault();

                        const formData = new FormData(this);

                        try {
                            const response = await fetch("/worker/settings/profile", {
                                method: "POST",
                                body: formData
                            });

                            const data = await response.json();

                           showToast(data.success ? 'success' : 'warning', data.success ? 'Profile Updated successfully!' : 'Failed Profile Update!', data.success ? `${data.message}` : `${data.error}`);

                            if (data.success) {
                                setTimeout(() => location.reload(), 1000);
                            }

                        } catch (err) {
                            console.error(err);
                        }
                    });
                    document.addEventListener("DOMContentLoaded", () => {
                        const addSkillBtn = document.getElementById("addSkillBtn");
                        const newSkillInput = document.getElementById("newSkillInput");
                        const skillsContainer = document.getElementById("skillsContainer");
                        const addSkillModalEl = document.getElementById('addSkillModal');
                        const addSkillModal = new bootstrap.Modal(addSkillModalEl);

                        addSkillBtn.addEventListener("click", async () => {
                            const skill = newSkillInput.value.trim();
                            if (!skill) return;

                            try {
                                const res = await fetch("/worker/settings/skills", {
                                    method: "POST",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ skill })
                                });

                                const data = await res.json();

                                if (data.success) {
                                    // Add new skill dynamically
                                    const span = document.createElement("span");
                                    span.className = "skills-badge";
                                    span.innerHTML = `${skill} <i class="bi bi-x-circle-fill ms-1 remove-skill" data-skill="${skill}"></i>`;
                                    skillsContainer.appendChild(span);

                                    newSkillInput.value = "";
                                    addSkillModal.hide();
                                } else {
                                    alert(data.message || "Failed to add skill");
                                }
                            } catch (err) {
                                console.error(err);
                            }
                        });

                        // Remove skill dynamically
                        skillsContainer.addEventListener("click", async (e) => {
                            if (e.target.classList.contains("remove-skill")) {
                                const skill = e.target.dataset.skill;
                                try {
                                    const res = await fetch(`/worker/settings/skills/${skill}`, { method: "DELETE" });
                                    const data = await res.json();
                                    if (data.success) {
                                        e.target.parentElement.remove();
                                    } else {
                                        alert(data.message || "Failed to remove skill");
                                    }
                                } catch (err) {
                                    console.error(err);
                                }
                            }
                        });
                        const emailSendBtn = document.getElementById("emailVerifyBtn");
                        const emailInputSection = document.getElementById("EmailVerifyBox");
                        const emailOtpInput = document.getElementById("emailOtp");
                        const resendEmailBtn = document.getElementById("resendEmailBtn");
                        const emailTimer = document.getElementById("emailTimer");
                        let emailCountdown;w

                        emailSendBtn.addEventListener("click", async () => {
                            try {
                                const res = await fetch("/worker/email/send", { method: "POST" });
                                const data = await res.json();
                                if (data.success) {
                                    emailInputSection.classList.remove("d-none");
                                    startEmailTimer(120);
                                   
                                     showToast('info', 'Verification code sent to your email.', `Please Check Your Email`)
                                } else {
                                    showToast('warning', 'Something went wrong', 'Please Check Youer Email Address')
                                }
                            } catch (err) {
                                console.error(err);
                                showToast('error', 'Server Error', `Something went wrong`)
                            }
                        });

                        emailOtpInput.addEventListener("keypress", async (e) => {
                            if (e.key === "Enter") {
                                const otp = emailOtpInput.value.trim();
                                if (!otp) return;

                                try {
                                    const res = await fetch("/worker/email/verify", {
                                        method: "POST",
                                        headers: { "Content-Type": "application/json" },
                                        body: JSON.stringify({ otp }),
                                    });
                                    const data = await res.json();
                                    showToast('success', 'Verified successfully!', `${data.message}`)

                                    if (data.success) {
                                        clearInterval(emailCountdown);
                                        emailInputSection.classList.add("d-none");

                                        // Update the Verify button text to show success
                                        const emailRowBtn = document.getElementById("emailVerifyBtn");
                                        emailRowBtn.textContent = "Verified";
                                        emailRowBtn.disabled = true;
                                        emailRowBtn.classList.remove("verify-button");
                                        emailRowBtn.classList.add("btn-success");

                                        // Optionally, show a checkmark next to the email
                                        const emailVerifiedIcon = document.createElement("i");
                                        emailVerifiedIcon.className = "bi bi-check-circle-fill text-success ms-2";
                                        emailRowBtn.parentElement.querySelector(".fw-medium").appendChild(emailVerifiedIcon);
                                    }
                                } catch (err) {
                                    console.error(err);
                                    showToast('error', 'Failed to verify OTP', `Something went wrong`)
                                }
                            }
                        });

                        resendEmailBtn.addEventListener("click", () => emailSendBtn.click());

                        function startEmailTimer(seconds) {
                            clearInterval(emailCountdown);
                            let remaining = seconds;
                            emailCountdown = setInterval(() => {
                                const mins = String(Math.floor(remaining / 60)).padStart(2, "0");
                                const secs = String(remaining % 60).padStart(2, "0");
                                emailTimer.textContent = `${mins}:${secs}`;
                                if (remaining-- <= 0) clearInterval(emailCountdown);
                            }, 1000);
                        }

                        // ===========================
                        // PHONE OTP VERIFICATION
                        // ===========================
                        const phoneSendBtn = document.getElementById("phoneSendBtn");
                        const phoneInputSection = document.getElementById("phoneVerifyBox");
                        const phoneOtpInput = document.getElementById("phoneOtp");
                        const resendPhoneBtn = document.getElementById("resendPhoneBtn");
                        const phoneTimer = document.getElementById("phoneTimer");
                        let phoneCountdown;

                        phoneSendBtn.addEventListener("click", async () => {
                            try {
                                const res = await fetch("/worker/phone/send", { method: "POST" });
                                const data = await res.json();
                                if (data.success) {
                                    phoneInputSection.classList.remove("d-none");
                                    startPhoneTimer(120);
                                     showToast('info', 'Verification code sent to your phone.', `Please Check Your Messages`)
                                } else {
                                    showToast('warning', 'Something went wrong', 'Please Check Youer Phone Number')
                                }
                            } catch (err) {
                                console.error(err);
                                showToast('error', 'Failed to send SMS', `Something went wrong`)
                            }
                        });

                        phoneOtpInput.addEventListener("keypress", async (e) => {
                            if (e.key === "Enter") {
                                const otp = phoneOtpInput.value.trim();
                                if (!otp) return;
                                try {
                                    const res = await fetch("/worker/phone/verify", {
                                        method: "POST",
                                        headers: { "Content-Type": "application/json" },
                                        body: JSON.stringify({ otp }),
                                    });
                                    const data = await res.json();
                                    showToast('success', 'Verified successfully!', `${data.message}`)
                                    if (data.success) {
                                        clearInterval(phoneCountdown);
                                        phoneInputSection.classList.add("d-none");
                                        // ✅ Here you can add code to update UI: mark phone as verified
                                    }
                                } catch (err) {
                                    console.error(err);
                                    showToast('error', 'Failed to verify OTP', `Something went wrong`)
                                }
                            }
                        });

                        resendPhoneBtn.addEventListener("click", () => phoneSendBtn.click());

                        function startPhoneTimer(seconds) {
                            clearInterval(phoneCountdown);
                            let remaining = seconds;
                            phoneCountdown = setInterval(() => {
                                const mins = String(Math.floor(remaining / 60)).padStart(2, "0");
                                const secs = String(remaining % 60).padStart(2, "0");
                                phoneTimer.textContent = `${mins}:${secs}`;
                                if (remaining-- <= 0) clearInterval(phoneCountdown);
                            }, 1000);
                        }
                    });
                </script>
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>